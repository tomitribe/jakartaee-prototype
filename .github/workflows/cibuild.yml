name: CI Build

on:
  push:
    paths-ignore:
    - 'docs/**'
    - '.github/**/*docs*'
  pull_request:
    paths-ignore:
    - 'docs/**'
    - '.github/**/*docs*'

env:
  LC_ALL: en_US.UTF-8

defaults:
  run:
    shell: bash

jobs:
  JDKxx_Matrix:
    strategy:
      matrix:
        java: [ 11, 15 ]
        os: [ ubuntu-latest ]
        include:
        - os: ubuntu-latest
          java: 8
          canonical: ${{ (github.repository == 'eclipse/transformer') && ((github.ref == 'refs/heads/main') || (github.ref == 'refs/heads/release')) && (github.event_name != 'pull_request') }}
        - os: ubuntu-latest
          java: 8
          experimental: true
          mavenopts: -Pbnd-snapshot
        - os: windows-latest
          java: 8
    name: JDK${{ matrix.java }} ${{ matrix.os }} ${{ matrix.mavenopts }}
    runs-on: ${{ matrix.os }}
    steps:
    - name: Git Checkout
      uses: actions/checkout@v2
    - name: Set up Java ${{ matrix.java }}
      uses: actions/setup-java@v2
      with:
        java-version: ${{ matrix.java }}
    - name: Build
      id: build
      continue-on-error: ${{ matrix.experimental }}
      run: |
        ./.github/scripts/build.sh ${{ matrix.mavenopts }}
    - name: Import GPG key
      id: import_gpg
      if: (matrix.canonical && (steps.build.outcome == 'success'))
      uses: mbarbero/ghaction-import-gpg@subkeys
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        FINGERPRINT: ${{ secrets.GPG_FINGERPRINT }}
    - name: GPG key information
      if: (steps.import_gpg.outcome == 'success')
      run: |
        echo "fingerprint: ${{ steps.import_gpg.outputs.fingerprint }}"
        echo "keyid:       ${{ steps.import_gpg.outputs.keyid }}"
        echo "name:        ${{ steps.import_gpg.outputs.name }}"
        echo "email:       ${{ steps.import_gpg.outputs.email }}"
    - name: Publish
      if: (matrix.canonical && (steps.build.outcome == 'success'))
      run: |
        ./.github/scripts/publish.sh -Possrh
      env:
        OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
